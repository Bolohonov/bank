pipeline {
    agent any

    environment {
        DOCKER_REGISTRY = credentials('DOCKER_REGISTRY')
        DB_PASSWORD     = credentials('DB_PASSWORD')
        GITHUB_USERNAME = credentials('GITHUB_USERNAME')
        DB_NAME         = 'bank'
        DB_USER         = '123456'
        IMAGE_TAG       = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Build & Unit Tests') {
            parallel {
                def microservices = [
                    'accountService',
                    'bankUI',
                    'blockerService',
                    'cashService',
                    'exchangeService',
                    'exchangeGeneratorService',
                    'notificationsService',
                    'transferService'
                ]

                microservices.each { service ->
                    stage("${service}") {
                        steps {
                            dir("${service}") {
                                sh './gradlew clean test'
                            }
                        }
                    }
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                sh """
                docker build -t ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG} ./exchangeGeneratorService
                docker build -t ${DOCKER_REGISTRY}/notifications-service:${IMAGE_TAG} ./notificationsService
                docker build -t ${DOCKER_REGISTRY}/blocker-service:${IMAGE_TAG} ./blockerService
                docker build -t ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG} ./exchangeService
                docker build -t ${DOCKER_REGISTRY}/account-service:${IMAGE_TAG} ./accountService
                docker build -t ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG} ./cashService
                docker build -t ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG} ./transferService
                docker build -t ${DOCKER_REGISTRY}/bank-ui:${IMAGE_TAG} ./bankUI
                """
            }
        }

        stage('Push Docker Images') {
            steps {
                withCredentials([string(credentialsId: 'GHCR_TOKEN', variable: 'GHCR_TOKEN')]) {
                    sh """
                    echo \$GHCR_TOKEN | docker login ghcr.io -u ${GITHUB_USERNAME} --password-stdin

                    docker push ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/notifications-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/blocker-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/exchange-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/account-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/cash-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/transfer-service:${IMAGE_TAG}
                    docker push ${DOCKER_REGISTRY}/bank-ui:${IMAGE_TAG}
                    """
                }
            }
        }

        stage('Deploy to TEST using Helm') {
            steps {
                sh """
                helm dependency update .
                helm upgrade --install bank ./ \\
                  --namespace test --create-namespace \\
                  --set db.auth.username=${DB_USER} \\
                  --set db.auth.password=${DB_PASSWORD} \\
                  --set db.auth.database=${DB_NAME} \\
                """
            }
        }

        stage('Manual Approval for PROD') {
            steps {
                input message: 'Deploy to PROD environment?', ok: 'Yes, deploy'
            }
        }

        stage('Deploy to PROD using Helm') {
            steps {
                sh """
                helm dependency update .
                helm upgrade --install bank ./ \\
                  --namespace prod --create-namespace \\
                  --set db.auth.username=${DB_USER} \\
                  --set db.auth.password=${DB_PASSWORD} \\
                  --set db.auth.database=${DB_NAME} \\
                """
            }
        }

    }
}