services:
  config-service:
    build:
      context: ./configService
      dockerfile: Dockerfile
    ports:
      - "${CONFIG_SERVER_PORT}:${CONFIG_SERVER_PORT}"
    environment:
      CONFIG_SERVER_PORT: ${CONFIG_SERVER_PORT}
    networks:
      - kafka
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${CONFIG_SERVER_PORT}/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  eureka-service-discovery:
    build:
      context: ./eurekaServiceDiscovery
      dockerfile: Dockerfile
    ports:
      - "${EUREKA_SERVER_PORT}:${EUREKA_SERVER_PORT}"
    environment:
      EUREKA_SERVER_PORT: ${EUREKA_SERVER_PORT}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
    depends_on:
      config-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:${EUREKA_SERVER_PORT}/actuator/health"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka

  notifications-service:
    build:
      context: ./notificationsService
      dockerfile: Dockerfile
    ports:
      - "${NOTIFICATIONS_SERVER_PORT}:${NOTIFICATIONS_SERVER_PORT}"
    environment:
      DATASOURCE_URL: ${DATASOURCE_URL}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      NOTIFICATIONS_SERVER_PORT: ${NOTIFICATIONS_SERVER_PORT}
      EUREKA_SERVER_PORT: ${EUREKA_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - kafka

  account-service:
    build:
      context: ./accountService
      dockerfile: Dockerfile
    ports:
      - "${ACCOUNTS_SERVER_PORT}:${ACCOUNTS_SERVER_PORT}"
    environment:
      DATASOURCE_URL: ${DATASOURCE_URL}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      ACCOUNTS_SERVER_PORT: ${ACCOUNTS_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - kafka

  bank-ui:
    build:
      context: ./bankUI
      dockerfile: Dockerfile
    ports:
      - "${BANK_UI_SERVER_PORT}:${BANK_UI_SERVER_PORT}"
    environment:
      BANK_UI_SERVER_PORT: ${BANK_UI_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - kafka

  blocker-service:
    build:
      context: ./blockerService
      dockerfile: Dockerfile
    ports:
      - "${BLOCKER_SERVER_PORT}:${BLOCKER_SERVER_PORT}"
    environment:
      BLOCKER_SERVER_PORT: ${BLOCKER_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - kafka

  exchange-service:
    build:
      context: ./exchangeService
      dockerfile: Dockerfile
    ports:
      - "${EXCHANGE_SERVER_PORT}:${EXCHANGE_SERVER_PORT}"
    environment:
      DATASOURCE_URL: ${DATASOURCE_URL}
      DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}
      DATASOURCE_PASSWORD: ${DATASOURCE_PASSWORD}
      EXCHANGE_SERVER_PORT: ${EXCHANGE_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - kafka

  exchange-generator-service:
    build:
      context: ./exchangeGeneratorService
      dockerfile: Dockerfile
    ports:
      - "${EXCHANGE_GENEGATOR_SERVER_PORT}:${EXCHANGE_GENEGATOR_SERVER_PORT}"
    environment:
      EXCHANGE_GENEGATOR_SERVER_PORT: ${EXCHANGE_GENEGATOR_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - kafka

  cash-service:
    build:
      context: ./cashService
      dockerfile: Dockerfile
    ports:
      - "${CASH_SERVER_PORT}:${CASH_SERVER_PORT}"
    environment:
      CASH_SERVER_PORT: ${CASH_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - kafka

  transfer-service:
    build:
      context: ./transferService
      dockerfile: Dockerfile
    ports:
      - "${TRANSFER_SERVER_PORT}:${TRANSFER_SERVER_PORT}"
    environment:
      TRANSFER_SERVER_PORT: ${TRANSFER_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
      KEYCLOAK_TOKEN_URL: ${KEYCLOAK_TOKEN_URL}
      KEYCLOAK_ISSUER_URL: ${KEYCLOAK_ISSUER_URL}
      GATEWAY_SERVER_URL: ${GATEWAY_SERVER_URL}
      KAFKA_BOOTSTRAP_SERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - kafka

  gateway-service:
    build:
      context: ./gatewayService
      dockerfile: Dockerfile
    ports:
      - "${GATEWAY_SERVER_PORT}:${GATEWAY_SERVER_PORT}"
    environment:
      GATEWAY_SERVER_PORT: ${GATEWAY_SERVER_PORT}
      EUREKA_ZONE: ${EUREKA_ZONE}
      CONFIG_SERVER_URL: ${CONFIG_SERVER_URL}
    depends_on:
      config-service:
        condition: service_healthy
      eureka-service-discovery:
        condition: service_healthy
      postgres-db:
        condition: service_healthy
    networks:
      - kafka

  postgres-db:
    image: postgres
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${DATASOURCE_PASSWORD}
      POSTGRES_DB: ${DATASOURCE_DB}
    ports:
      - "5433:5432"
    volumes:
      - .pg-oper-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATASOURCE_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kafka

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - .redis_data:/data
    networks:
      - kafka

  keycloak:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: keycloak
    restart: unless-stopped
    environment:
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_HOSTNAME: localhost
      KC_HTTP_ENABLED: "true"
    volumes:
      - ./realm-config.json:/opt/keycloak/data/import/realm-config.json
    ports:
      - "8282:8080"
    networks:
      - kafka
    command:
      - start-dev --import-realm

  kafka:
    image: bitnami/kafka
    container_name: kafka
    hostname: bolohonov.kafka.ru
    ports:
      - "9092:9092"
      - "9093:9093"
    expose:
      - "9093"
    env_file:
      - ./kafka/kafka.env
    volumes:
      - ./kafka/server.properties:/opt/bitnami/kafka/config/server.properties
      - ./kafka/producer.properties:/opt/bitnami/kafka/config/producer.properties
      - ./kafka/consumer.properties:/opt/bitnami/kafka/config/consumer.properties
    networks:
      - kafka

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:latest
    restart: unless-stopped
    ports:
      - "8072:8080"
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_BOOTSTRAP_SERVERS}
      KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: PLAINTEXT
    networks:
      - kafka

networks:
  kafka:
    driver: bridge
    name: kafka
    external: true