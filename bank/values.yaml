# Global values (if any)
global:
  domain: bank.local # Example domain for ingress

exchange-service:
  replicaCount: 1
  image:
    repository: exchange-service
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent
    # -----------------------------
  service:
    type: ClusterIP
    port: 8087
  kafka:
    url: "http://{{.Release.Name}}-kafka-broker-0.{{.Release.Name}}-kafka-broker-headless.{{.Release.Namespace}}.svc.cluster.local:9092"
    #url: "http://bank-kafka.{{ .Release.Namespace }}.svc.cluster.local:9092"
  keycloak:
    issuer_uri: "http://bank-keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080/realms/bank"
    token_uri: "http://bank-keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080/realms/bank/protocol/openid-connect/token"
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: gateway-ingress.bank.local
        paths:
          - path: /exchangeService(/|$)(.*)
            pathType: ImplementationSpecific
    tls: [ ]
  config:
    database_url: "jdbc:postgresql://bank-db.{{ .Release.Namespace }}.svc.cluster.local:5432/bank"
    database_username: "bank"
  resources:
    limits:
      memory: "1Gi"
    requests:
      memory: "512Mi"

blocker-service:
  replicaCount: 1
  image:
    repository: blocker-service
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent
    # -----------------------------
  service:
    type: ClusterIP
    port: 8085
  keycloak:
    issuer_uri: "http://bank-keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080/realms/bank"
    token_uri: "http://bank-keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080/realms/bank/protocol/openid-connect/token"
  ingress:
    enabled: true
    className: "nginx"
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$2
      nginx.ingress.kubernetes.io/use-regex: "true"
    hosts:
      - host: gateway-ingress.bank.local
        paths:
          - path: /blockerService(/|$)(.*)
            pathType: ImplementationSpecific
    tls: [ ]
  config:
    database_url: "jdbc:postgresql://bank-db.{{ .Release.Namespace }}.svc.cluster.local:5432/bank"
    database_username: "bank"
  zipkin:
    url: "http://bank-zipkin.{{ .Release.Namespace }}.svc.cluster.local:9411/api/v2/spans"
  resources:
    limits:
      memory: "1Gi"
    requests:
      memory: "512Mi"

exchange-generator-service:
  replicaCount: 1
  image:
    repository: exchange-generator-service
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent
    # -----------------------------
  service:
    type: ClusterIP
    port: 8091
  kafka:
    url: "http://{{.Release.Name}}-kafka-broker-0.{{.Release.Name}}-kafka-broker-headless.{{.Release.Namespace}}.svc.cluster.local:9092"
    #url: "http://bank-kafka.{{ .Release.Namespace }}.svc.cluster.local:9092"
  keycloak:
    issuer_uri: "http://bank-keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080/realms/bank"
    token_uri: "http://bank-keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080/realms/bank/protocol/openid-connect/token"
  ingress:
    enabled: true
    className: "nginx"
    annotations: {}
    hosts:
      - host: exchange-service.bank.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: [ ]
  gateway:
    service_url: "http://exchange-service.{{ .Release.Namespace }}.svc.cluster.local:8087"

notifications-service:
  replicaCount: 1
  image:
    repository: notifications-service
    tag: "0.0.1-SNAPSHOT"
    pullPolicy: IfNotPresent
    # -----------------------------
  service:
    type: ClusterIP
    port: 8081
  ingress:
    enabled: true
    className: "nginx"
    annotations: {}
    hosts:
      - host: notifications-service.bank.local
        paths:
          - path: /
            pathType: ImplementationSpecific
    tls: [ ]
  keycloak:
    issuer_uri: "http://bank-keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080/realms/bank"
    token_uri: "http://bank-keycloak.{{ .Release.Namespace }}.svc.cluster.local:8080/realms/bank/protocol/openid-connect/token"
  config:
    database_url: "jdbc:postgresql://bank-db.{{ .Release.Namespace }}.svc.cluster.local:5432/bank"
    database_username: "bank"


db:
  enabled: true
  auth:
    enablePostgresUser: true
    postgresPassword: "12345" # Можно оставить пустым для генерации
    database: bank
    username: bank
    password: "123456" # Example: Not recommended for production
  primary:
    persistence:
      enabled: true
      size: 1Gi # Small size for example
    pgHbaConfiguration: |
      # Локальные соединения без пароля - для тестирования, не для прода
      local   all             all                                     trust
      host    replication     all                   127.0.0.1/32    md5
      host    replication     all                   ::1/128         md5
      host    all             all                   0.0.0.0/0       md5
      host    all             all                   ::/0            md5

keycloak:
  enabled: true
  auth:
    adminUser: admin
    adminPassword: adminpassword
  httpRelativePath: "/"
  hostname: localhost
  production: false
  tls:
    enabled: false
  service:
    type: ClusterIP
    ports:
      http: 8080
  extraArgs:
    - --import-realm
  extraVolumes:
    - name: realm-config
      configMap:
        name: keycloak-realm-config
  extraVolumeMounts:
    - name: realm-config
      mountPath: /opt/bitnami/keycloak/data/import
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: --import-realm

kafka:
  enabled: true
  clusterId: "bank-kafka-cluster"
  auth:
    password: "12345"
    interBrokerUser: "broker"
    interBrokerPassword: "12345"
  controller:
    replicaCount: 1
    automountServiceAccountToken: true
    containerSecurityContext:
      seLinuxOptions: {}
    config: {}
  broker:
    replicaCount: 1
    persistence:
      size: 1Gi
    automountServiceAccountToken: true
    containerSecurityContext:
      seLinuxOptions: {}
    config: {}
  zookeeper:
    enabled: false
  kraft:
    enabled: true
    mode: combined
  listeners:
    client:
      protocol: PLAINTEXT
    controller:
      protocol: PLAINTEXT
    interbroker:
      protocol: PLAINTEXT
  externalAccess:
    enabled: true
    broker:
      service:
        type: ClusterIP
        ports:
          external: 9094
        domain: ingress-ip
    controller:
      service:
        type: ClusterIP
        ports:
          external: 9094
        domain: ingress-ip
  configuration:
    controllerQuorumVoters: |
      1@bank-kafka-controller-0-external.default.svc.cluster.local:9094
  tls:
    autoGenerated:
      enabled: true
      engine: helm
      certManager:
        enabled: false
  provisioning:
    containerSecurityContext:
      seLinuxOptions: {}
  metrics:
    jmx:
      containerSecurityContext:
        seLinuxOptions: {}
